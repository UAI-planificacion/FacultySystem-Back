generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}


datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


enum Headquarters {
    ERRAZURIZ
    PENALOLEN
    VINADELMAR
    VITACURA   
}


model Professor {
    id          String @id
    name        String
    email       String? @unique
    isMock      Boolean @default(false)

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    requestDetails  PlanningChange[]
    sections        Section[]
    sessions        Session[]
    requestSession  RequestSession[]

    @@index([name])
}


enum SizeValue {
    XS
    XE
    S
    SE
    MS
    M
    L
    XL
    XXL
}


model Size {
    id          SizeValue @id
    detail      String
    min         Int?
    max         Int?
    lessThan    Int?
    greaterThan Int?

    subjects        Subject[]
    requestDetails  PlanningChange[]
    sections        Section[]
    requestSession  RequestSession[]
}


enum SpaceType {
    ROOM
    STUDY_ROOM
    MEETING_ROOM
    POSTGRADUATE_ROOM
    AUDITORIO
    LAB
    LABPC
    DIS
    CORE
    MULTIPURPOSE
}


enum Building {
    A
    B
    C
    D
    E
    F
    Z
}


enum SessionName {
    C // Cátedra
    A // Ayudantía
    T // Talle
    L // Laboratorio
}


model Section {
    id              String @id @default(ulid())
    code            Int
    isClosed        Boolean @default(false)
    groupId         String
    startDate       DateTime
    endDate         DateTime
    spaceType       SpaceType?

    periodId        String
    period          Period @relation(fields: [periodId], references: [id], onDelete: Cascade)

    subjectId       String
    subject         Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

    professorId     String?
    professor       Professor? @relation(fields: [professorId], references: [id])

    spaceSizeId     SizeValue?
    spaceSize       Size? @relation(fields: [spaceSizeId], references: [id])

    workshop        Int @default( 0 )   // Taller
    lecture         Int @default( 0 )   // Cátedra
    tutoringSession Int @default( 0 )   // Ayudantía
    laboratory      Int @default( 0 )   // Laboratorio

    sessions        Session[]
    request         Request?

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}


model Session {
    id                      String @id @default(ulid())
    name                    SessionName
    spaceId                 String
    correctedRegistrants    Int?
    realRegistrants         Int?
    plannedBuilding         String?
    chairsAvailable         Int?
    isEnglish               Boolean @default( false )
    date                    DateTime

    sectionId               String
    section                 Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

    professorId             String?
    professor               Professor? @relation(fields: [professorId], references: [id])

    dayModuleId             Int?
    dayModule               DayModule? @relation(fields: [dayModuleId], references: [id])

    // spaceSizeId             SizeValue?
    // spaceSize               Size? @relation(fields: [spaceSizeId], references: [id])

    requestDetail           PlanningChange?
}


enum DayName {
    Lunes
    Martes
    Miercoles
    Jueves
    Viernes
    Sabado
    Domingo
}


model Day {
    id          Int @id @default(autoincrement())
    name        DayName @unique
    shortName   String?
    mediumName  String?

    dayModules DayModule[]

    @@index([name])
}


enum ModuleDifference {
    A
    B
}


model Module {
    id          Int @id @default(autoincrement())
    code        String
    difference  ModuleDifference?
    startHour   String
    endHour     String
    isActive    Boolean @default(true)

    dayModules  DayModule[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([code])
}




model DayModule {
    id          Int @id @default(autoincrement())
    dayId       Int
    moduleId    Int
    order       Int @default(0)

    day       Day    @relation(fields: [dayId], references: [id])
    module    Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

    sessions Session[]
    moduleDays  ModuleDay[]
    // requestDayModules RequestDayModule[]
    sessionDayModules SessionDayModule[]

    @@unique([dayId, moduleId])
}


enum PeriodStatus {
    InProgress
    Closed
}


enum PeriodType {
    ANUAL
    TRIMESTRAL
    SEMESTRAL
    VERANO
}


model Period {
    id              String @id
    name            String
    costCenterId    String
    startDate       DateTime
    endDate         DateTime
    openingDate     DateTime?
    closingDate     DateTime?

    status          PeriodStatus @default(InProgress)
    type            PeriodType @default(SEMESTRAL)

    sections        Section[]

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@index([name])
}


model Grade {
    id              String @id @default(ulid())
    name            String @unique
    headquartersId  Headquarters? @default(ERRAZURIZ)

    requestDetails  PlanningChange[]
    requestSession RequestSession[]

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@index([name])
}


model Faculty {
    id          String @id @default(ulid())
    name        String @unique
    description String?
    isActive    Boolean @default(true)

    subjects    Subject[]
    staff       Staff[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}


model Subject {
    id              String @id
    name            String @unique
    isActive        Boolean @default( true )
    spaceType       SpaceType?

    faculty         Faculty @relation(fields: [facultyId], references: [id], onDelete: Cascade)
    facultyId       String

    spaceSizeId     SizeValue?
    spaceSize       Size? @relation(fields: [spaceSizeId], references: [id])

    workshop        Int @default( 0 )   // Taller
    lecture         Int @default( 0 )   // Cátedra
    tutoringSession Int @default( 0 )   // Ayudantía
    laboratory      Int @default( 0 )   // Laboratorio

    sections Section[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name, facultyId])
}


enum Role {
    ADMIN
    ADMIN_FACULTY
    EDITOR
    VIEWER
}


model Staff {
    id          String @id @default(ulid())
    name        String
    email       String @unique
    role        Role @default(VIEWER)
    isActive    Boolean @default(true)

    faculty     Faculty? @relation(fields: [facultyId], references: [id], onDelete: Cascade)
    facultyId   String?

    staffCreate             Request[] @relation("staffCreate")
    staffUpdate             Request[] @relation("staffUpdate")
    requestDetails          PlanningChange[] @relation("staffCreate")
    requestDetailsUpdate    PlanningChange[] @relation("staffUpdate")
    comments                Comment[]
    requestSessions         RequestSession[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name, facultyId, email, role])
}


enum Status {
    PENDING
    APPROVED
    REJECTED
    REVIEWING
}


model Request {
    id              String @id @default(ulid())
    title           String
    status          Status @default(PENDING)
    // isConsecutive   Boolean @default(false)
    // description     String?

    staffCreateId   String
    staffCreate     Staff @relation("staffCreate", fields: [staffCreateId], references: [id], onDelete: Cascade)

    staffUpdateId   String?
    staffUpdate     Staff? @relation("staffUpdate", fields: [staffUpdateId], references: [id], onDelete: Cascade)

    sectionId       String @unique
    section         Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

    // details         RequestDetail[]
    // comments        Comment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    requesSessions RequestSession[]


    @@index([status])
}


model RequestSession {
    id              String @id @default(ulid())
    session         SessionName
    spaceId         String?
    isEnglish       Boolean @default(false)
    isConsecutive   Boolean @default(false)
    description     String?
    spaceType       SpaceType?
    inAfternoon     Boolean @default(false)

    gradeId         String?
    grade           Grade? @relation(fields: [gradeId], references: [id], onDelete: Cascade)

    professorId     String?
    professor       Professor? @relation(fields: [professorId], references: [id])

    spaceSizeId     SizeValue?
    spaceSize       Size? @relation(fields: [spaceSizeId], references: [id])

    requestId       String
    request         Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

    // staffCreateId   String
    // staffCreate     Staff @relation("staffCreate", fields: [staffCreateId], references: [id], onDelete: Cascade)

    staffUpdateId   String?
    staffUpdate     Staff? @relation(fields: [staffUpdateId], references: [id], onDelete: Cascade)

    comments        Comment[]
    // requestDayModules RequestDayModule[]
    sessionDayModules SessionDayModule[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([requestId, session])
}

model SessionDayModule {
    id          String @id @default(ulid())

    requestSessionId   String?
    requestSession     RequestSession? @relation(fields: [requestSessionId], references: [id], onDelete: Cascade)

    planningChangeId String?
    planningChange   PlanningChange? @relation(fields: [planningChangeId], references: [id], onDelete: Cascade)

    dayModuleId Int
    dayModule   DayModule @relation(fields: [dayModuleId], references: [id], onDelete: Cascade)
}


// model DayModule {
//     id          String @id @default(ulid())

//     requestSessionId   String
//     requestSession     RequestSession @relation(fields: [requestSessionId], references: [id], onDelete: Cascade)

//     dayModuleId Int
//     dayModule   DayModule @relation(fields: [dayModuleId], references: [id], onDelete: Cascade)
// }


// model PlanningModuleDay {
//     id              String @id @default(ulid())
//     dayModuleId     Int
//     dayModule       DayModule @relation(fields: [dayModuleId], references: [id])

//     planningChangeId String
//     planningChange   PlanningChange @relation(fields: [planningChangeId], references: [id], onDelete: Cascade)

//     @@unique([planningChangeId, dayModuleId])
// }





model ModuleDay {
    id              String @id @default(ulid())
    dayModuleId     Int
    dayModule       DayModule @relation(fields: [dayModuleId], references: [id])

    planningChangeId String
    planningChange   PlanningChange @relation(fields: [planningChangeId], references: [id], onDelete: Cascade)

    @@unique([planningChangeId, dayModuleId])
}



model PlanningChange {
    id              String @id @default(ulid())
    title           String
    status          Status @default(PENDING)

    // minimum         Int?
    // maximum         Int?
    // costCenterId    String?
    // building        Building?

    spaceId         String?
    isEnglish       Boolean @default(false)
    isConsecutive   Boolean @default(false)
    description     String?
    spaceType       SpaceType?
    inAfternoon     Boolean @default(false)
    isPriority      Boolean @default(false) // *profesor, dia y módulo no son null, se le da prioridad

    gradeId         String?
    grade           Grade? @relation(fields: [gradeId], references: [id], onDelete: Cascade)

    professorId     String?
    professor       Professor? @relation(fields: [professorId], references: [id])

    spaceSizeId     SizeValue?
    spaceSize       Size? @relation(fields: [spaceSizeId], references: [id])

    staffCreateId   String
    staffCreate     Staff @relation("staffCreate", fields: [staffCreateId], references: [id], onDelete: Cascade)

    staffUpdateId   String?
    staffUpdate     Staff? @relation("staffUpdate", fields: [staffUpdateId], references: [id], onDelete: Cascade)

    // requestId       String
    // request         Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

    sessionId       String @unique
    session         Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

    sessionDayModules SessionDayModule[]

    comments        Comment[]
    moduleDays      ModuleDay[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // @@index([requestId])
}


model Comment {
	id          	String @id @default(ulid())
	content     	String

	// request         Request? @relation(fields: [requestId], references: [id], onDelete: Cascade)
	// requestId     	String?
    requestSessionId String
    requestSession   RequestSession @relation(fields: [requestSessionId], references: [id], onDelete: Cascade)

    planningChangeId String?
    planningChange   PlanningChange? @relation(fields: [planningChangeId], references: [id], onDelete: Cascade)

    staff           Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
    staffId         String

	createdAt   	DateTime @default(now())
	updatedAt   	DateTime @updatedAt

	@@index([requestSessionId, planningChangeId])
}
